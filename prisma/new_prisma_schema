// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Specify the DB type and the connection string AKA DB_URL
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Boilerplate--we would only change this if we wanted to change how 
// the Prisma Client is generated.
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// Represents a Role.
enum Role {
  RIDER
  DRIVER
  VIEWER
}

enum Permission {
  USER
  ADMIN
  MANAGER
}

// Represents a Status.
enum Status {
  ACTIVE
  INACTIVE
}

// Represents an Account--need this for NextAuth.
model Account {
  id                String  @id @default(cuid()) // primary key
  userId            String  @map(name: "user_id") // foreign key
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String? @db.MediumText
  access_token      String? @db.MediumText
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String? @db.MediumText
  id_token          String? @db.MediumText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "account")
}

// Represents a Session--need this for NextAuth
model Session {
  id           String   @id @default(cuid()) // primary key
  sessionToken String   @unique @map(name: "session_token")
  userId       String // foreign key
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "session")
}

// Represents an Invitation to a user
model Request {
  id             String        @id @default(cuid()) // primary key
  message        String        @db.VarChar(255)
  fromUserId     String // foreign key
  toUserId       String // foreign key
  fromUser       User          @relation("sentRequests", fields: [fromUserId], references: [id])
  toUser         User          @relation("receivedRequests", fields: [toUserId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  dateCreated    DateTime      @default(now())
  conversationId String?

  @@index([fromUserId])
  @@index([toUserId])
  @@index([conversationId])
  @@map(name: "request")
}

// Represents a Conversation between two users
model Conversation {
  id          String    @id @default(cuid())
  requestId   String    @unique
  messages    Message[]
  request     Request[]
  dateCreated DateTime  @default(now())

  @@map(name: "conversation")
}

// Represents a Message sent by a User
model Message {
  id             String       @id @default(cuid()) // Primary key
  conversationId String // Foreign key
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String       @db.VarChar(255)
  isRead         Boolean      @default(false)
  User           User         @relation(fields: [userId], references: [id])
  userId         String
  dateCreated    DateTime     @default(now())

  @@index([conversationId])
  @@index([userId])
  @@map(name: "message")
}

// Represents a group of users
model CarpoolGroup {
  id          String   @id @default(cuid()) // primary key
  message     String
  users       User[]
  dateCreated DateTime @default(now())

  @@map(name: "group")
}

// Represents a Co-op Term for historical tracking
model CoopTerm {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term          String    // e.g., "Spring 2024"
  companyName   String
  startDate     DateTime  @db.Date
  endDate       DateTime  @db.Date
  
  // Company address fields
  companyStreet   String  @default("")
  companyCity     String  @default("")
  companyState    String  @default("")
  companyZip      String  @default("")
  companyCountry  String  @default("")
  companyCoordLng Float   @default(0)
  companyCoordLat Float   @default(0)
  
  // Additional fields
  daysWorking     String  @default("")
  startTime       DateTime? @db.Time(0)
  endTime         DateTime? @db.Time(0)
  dateCreated     DateTime @default(now())

  @@index([userId])
  @@map(name: "coop_term")
}

// Represents a User--need this for NextAuth and the data it stores.
model User {
  id                 String        @id @default(cuid()) // primary key
  name               String?
  email              String?       @unique
  emailVerified      DateTime?     @map(name: "email_verified")
  image              String?       @db.MediumText
  bio                String        @default("")
  preferredName      String        @default("")
  pronouns           String        @default("")
  accounts           Account[] // can have multiple accounts
  sessions           Session[] // can have multiple settings
  role               Role          @default(VIEWER)
  permission         Permission    @default(USER)
  status             Status        @default(ACTIVE)
  seatAvail          Int           @default(0) @map("seat_avail")
  
  // Current company info
  companyName        String        @default("") @map("company_name")
  
  // Company address - broken down
  companyStreet      String        @default("") @map("company_street")
  companyCity        String        @default("") @map("company_city")
  companyState       String        @default("") @map("company_state")
  companyZip         String        @default("") @map("company_zip")
  companyCountry     String        @default("") @map("company_country")
  companyCoordLng    Float         @default(0) @map("company_coord_lng")
  companyCoordLat    Float         @default(0) @map("company_coord_lat")
  
  // Start location - broken down
  startStreet        String        @default("") @map("start_street")
  startCity          String        @default("") @map("start_city")
  startState         String        @default("") @map("start_state")
  startZip           String        @default("") @map("start_zip")
  startCountry       String        @default("") @map("start_country")
  startCoordLng      Float         @default(0) @map("start_coord_lng")
  startCoordLat      Float         @default(0) @map("start_coord_lat")
  
  // Company POI - broken down
  companyPOIStreet   String        @default("") @map("company_poi_street")
  companyPOICity     String        @default("") @map("company_poi_city")
  companyPOIState    String        @default("") @map("company_poi_state")
  companyPOIZip      String        @default("") @map("company_poi_zip")
  companyPOICountry  String        @default("") @map("company_poi_country")
  companyPOICoordLng Float         @default(0) @map("company_poi_coord_lng")
  companyPOICoordLat Float         @default(0) @map("company_poi_coord_lat")
  
  // Start POI - broken down
  startPOIStreet     String        @default("") @map("start_poi_street")
  startPOICity       String        @default("") @map("start_poi_city")
  startPOIState      String        @default("") @map("start_poi_state")
  startPOIZip        String        @default("") @map("start_poi_zip")
  startPOICountry    String        @default("") @map("start_poi_country")
  startPOICoordLng   Float         @default(0) @map("start_poi_coord_lng")
  startPOICoordLat   Float         @default(0) @map("start_poi_coord_lat")
  
  // Current co-op term info
  isOnboarded        Boolean       @default(false) @map("is_onboarded")
  licenseSigned      Boolean       @default(false) @map("license_signed")
  daysWorking        String        @default("") @map("days_working")
  startTime          DateTime?     @map("start_time") @db.Time(0)
  endTime            DateTime?     @map("end_time") @db.Time(0)
  currentCoopTerm    String        @default("") @map("current_coop_term")
  coopStartDate      DateTime?     @map("coop_start_date") @db.Date
  coopEndDate        DateTime?     @map("coop_end_date") @db.Date
  
  // Historical co-op terms
  coopTerms          CoopTerm[]
  
  // Relationships
  favoritedBy        User[]        @relation("Favorites")
  favorites          User[]        @relation("Favorites")
  sentRequests       Request[]     @relation("sentRequests")
  receivedRequests   Request[]     @relation("receivedRequests")
  carpool            CarpoolGroup? @relation(fields: [carpoolId], references: [id])
  carpoolId          String?
  Message            Message[]
  
  // Timestamps
  dateCreated        DateTime      @default(now())
  dateModified       DateTime      @default(now()) @updatedAt
  groupMessage       String?       @map("group_message") @db.Text

  @@index([carpoolId])
  @@map(name: "user")
}

// Represents a VerificationToken--need this for NextAuth.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_token")
}