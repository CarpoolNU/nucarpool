datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}


enum Role {
  RIDER
  DRIVER
  VIEWER
}

enum Permission {
  USER
  ADMIN
  MANAGER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AddressType {
  HOME
  WORK
  POI
}

model Address {
  id        String      @id @default(cuid())
  street    String      @default("")
  city      String      @default("")
  state     String      @default("")
  zip       String      @default("")
  country   String      @default("")
  coordLng  Float       @default(0) @map("coord_lng")
  coordLat  Float       @default(0) @map("coord_lat")
  type      AddressType
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDefault Boolean     @default(false) @map("is_default")

  @@index([userId])
  @@map(name: "address")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String? @db.MediumText
  access_token      String? @db.MediumText
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String? @db.MediumText
  id_token          String? @db.MediumText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "session")
}

model Request {
  id             String        @id @default(cuid())
  message        String        @db.VarChar(255)
  fromUserId     String
  toUserId       String
  fromUser       User          @relation("sentRequests", fields: [fromUserId], references: [id])
  toUser         User          @relation("receivedRequests", fields: [toUserId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  dateCreated    DateTime      @default(now())
  conversationId String?

  @@index([fromUserId])
  @@index([toUserId])
  @@index([conversationId])
  @@map(name: "request")
}

model Conversation {
  id          String    @id @default(cuid())
  requestId   String    @unique
  messages    Message[]
  request     Request[]
  dateCreated DateTime  @default(now())

  @@map(name: "conversation")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String       @db.VarChar(255)
  isRead         Boolean      @default(false)
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  dateCreated    DateTime     @default(now())

  @@index([conversationId])
  @@index([userId])
  @@map(name: "message")
}

model CarpoolGroup {
  id          String   @id @default(cuid())
  message     String
  users       User[]
  dateCreated DateTime @default(now())

  @@map(name: "group")
}

model CoopTerm {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  term          String
  companyName   String
  startDate     DateTime  @db.Date
  endDate       DateTime  @db.Date
  companyStreet String    @default("")
  companyCity   String    @default("")
  companyState  String    @default("")
  companyZip    String    @default("")
  companyCountry String   @default("")
  companyCoordLng Float   @default(0)
  companyCoordLat Float   @default(0)
  daysWorking   String    @default("")
  startTime     DateTime? @db.Time(0)
  endTime       DateTime? @db.Time(0)
  dateCreated   DateTime  @default(now())

  @@index([userId])
  @@map(name: "coop_term")
}

model UserPreferences {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  daysWorking     String    @default("") @map("days_working")
  startTime       DateTime? @map("start_time") @db.Time(0)
  endTime         DateTime? @map("end_time") @db.Time(0)
  seatAvail       Int       @default(0) @map("seat_avail")
  dateCreated     DateTime  @default(now())
  dateModified    DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "user_preferences")
}

model UserProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String    @default("")
  preferredName  String    @default("")
  pronouns       String    @default("")
  groupMessage   String?   @map("group_message") @db.Text
  dateCreated    DateTime  @default(now())
  dateModified   DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "user_profile")
}

model CurrentCoopStatus {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName     String    @default("") @map("company_name")
  currentCoopTerm String    @default("") @map("current_coop_term")
  coopStartDate   DateTime? @map("coop_start_date") @db.Date
  coopEndDate     DateTime? @map("coop_end_date") @db.Date
  isOnboarded     Boolean   @default(false) @map("is_onboarded")
  licenseSigned   Boolean   @default(false) @map("license_signed")
  dateCreated     DateTime  @default(now())
  dateModified    DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "current_coop_status")
}

model UserFavorite {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  favoriteId    String
  favorite      User     @relation("FavoritedBy", fields: [favoriteId], references: [id], onDelete: Cascade)
  dateCreated   DateTime @default(now())

  @@unique([userId, favoriteId])
  @@index([userId])
  @@index([favoriteId])
  @@map(name: "user_favorite")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?          @map(name: "email_verified")
  image              String?            @db.MediumText
  role               Role               @default(VIEWER)
  permission         Permission         @default(USER)
  status             Status             @default(ACTIVE)
  
  // Relationships - auth
  accounts           Account[]
  sessions           Session[]
  
  // Relationships - profile and preferences
  addresses          Address[]
  profile            UserProfile?
  preferences        UserPreferences?
  currentCoopStatus  CurrentCoopStatus?
  coopTerms          CoopTerm[]
  
  // Relationships - social
  favorites          UserFavorite[]     @relation("UserFavorites")
  favoritedBy        UserFavorite[]     @relation("FavoritedBy")
  sentRequests       Request[]          @relation("sentRequests")
  receivedRequests   Request[]          @relation("receivedRequests")
  messages           Message[]
  
  // Relationships - groups
  carpool            CarpoolGroup?      @relation(fields: [carpoolId], references: [id])
  carpoolId          String?
  
  // Timestamps
  dateCreated        DateTime           @default(now())
  dateModified       DateTime           @default(now()) @updatedAt

  @@index([carpoolId])
  @@map(name: "user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_token")
}